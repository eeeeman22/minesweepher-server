{"version":3,"sources":["banner.jsx","actions.js","menu.jsx","board.jsx","App.js","boardFunctions.js","reducers.js","store.js","index.js"],"names":["connect","state","victoryStatus","failureStatus","flagsApplied","totalMines","timer","className","style","float","backgroundColor","color","CLICKED","TOGGLE_FLAGGED","NEW_GAME","CHANGE_REQ_BOARD_SIZE","CHANGE_REQ_BOARD_DIFFICULTY","INCREMENT_TIMER","CHANGE_TIMER_LIMIT","AVALANCHE","store","boardParams","requestedBoardSize","requestedBoardDifficulty","timerLimit","dispatch","type","min","max","value","onChange","e","size","target","difficulty","console","log","Number","default","newLimit","onClick","resetBoard","getCellClass","cell","hasBeenClicked","flagged","getCellContents","cellClass","split","board","map","row","rowNum","key","cellNum","cellContents","rownum","cellnum","altKey","location","clickSquare","setInterval","display","width","generateNewBoard","height","push","assignMines","maxNumOfMines","mines","Math","floor","random","length","col","assignNumbers","initialState","createInitialState","sizeParams","Object","assign","checkForVictory","square","avalanche","nonflaggedMines","nonClickedSquares","numberOfMinesRemaining","potentialSpots","concat","i","minesweeperApp","action","failureBoard","JSON","parse","stringify","clickedBoard","recursiveBoardCheck","newBoard","toggledBoard","avalancheState","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ef9038a.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nconst Banner = ({\n  victoryStatus,\n  failureStatus,\n  flagsApplied,\n  totalMines,\n  timer\n}) => {\n  if (victoryStatus === false && failureStatus === false) {\n    return (\n      <div>\n        <div className=\"banner\">\n          <span style={{ float: \"left\" }}>time elapsed:{timer}</span>\n          <span style={{ float: \"right\" }}>\n            Mines Remaining:{totalMines - flagsApplied}\n          </span>\n        </div>\n      </div>\n    );\n  } else if (victoryStatus === true) {\n    return (\n      <div style={{ backgroundColor: \"green\" }} className=\"victory\">\n        <h1 style={{ color: \"white\" }}>VICTORY!</h1>\n      </div>\n    );\n  } else if (failureStatus === true) {\n    return (\n      <div style={{ backgroundColor: \"red\" }} className=\"failure\">\n        <h1 style={{ color: \"white\" }}>FAILURE!</h1>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    victoryStatus: state.victoryStatus,\n    failureStatus: state.failureStatus,\n    flagsApplied: state.flagsApplied,\n    totalMines: state.totalMines,\n    timer: state.timer\n  };\n};\nexport default connect(mapStateToProps, null)(Banner);\n","/*\n * action types\n */\n\nexport const CLICKED = \"CLICKED\";\nexport const TOGGLE_FLAGGED = \"TOGGLE_FLAGGED\";\nexport const NEW_GAME = \"NEW_GAME\";\nexport const CHANGE_REQ_BOARD_SIZE = \"CHANGE_REQ_BOARD_SIZE\";\nexport const CHANGE_REQ_BOARD_DIFFICULTY = \"CHANGE_REQ_BOARD_DIFFICULTY\";\nexport const INCREMENT_TIMER = \"INCREMENT_TIMER\";\nexport const CHANGE_TIMER_LIMIT = \"CHANGE_TIMER_LIMIT\";\nexport const AVALANCHE = \"AVALANCHE\";\n\n/*\n * action creators\n */\n\nexport function clickSquare(location) {\n  return { type: CLICKED, location: location };\n}\n\nexport function toggleFlag(location) {\n  return { type: TOGGLE_FLAGGED, location };\n}\nexport function changeRequestedBoardSize(size) {\n  return { type: CHANGE_REQ_BOARD_SIZE, size: size };\n}\n\nexport function resetBoard(boardParams) {\n  return { type: NEW_GAME, boardParams: boardParams };\n}\n\nexport function changeRequestedBoardDifficulty(difficulty) {\n  return { type: CHANGE_REQ_BOARD_DIFFICULTY, difficulty: difficulty };\n}\n\nexport function incrementTimer() {\n  return { type: INCREMENT_TIMER };\n}\n\nexport function changeTimerLimit(newLimit) {\n  return { type: CHANGE_TIMER_LIMIT, timerLimit: newLimit };\n}\n\nexport function avalancheActionCreator() {\n  return { type: AVALANCHE };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  resetBoard,\n  changeRequestedBoardSize,\n  changeRequestedBoardDifficulty,\n  changeTimerLimit,\n  avalancheActionCreator\n} from './actions';\n\n// Allow the user to adjust\n// the difficulty level (board size + number of mines)\nconst Menu = ({\n  dispatch,\n  boardParams,\n  requestedBoardDifficulty,\n  timerLimit\n}) => {\n  return (\n    <div>\n      <table className=\"menuContainer\">\n        <tbody>\n          <tr>\n            <td>Board Size</td>\n            <td>\n              <input\n                type=\"range\"\n                min=\"5\"\n                max=\"20\"\n                value={boardParams}\n                onChange={e => {\n                  dispatch(changeRequestedBoardSize(e.target.value));\n                }}\n              />{' '}\n            </td>\n            <td>\n              {boardParams}X{boardParams}\n            </td>\n          </tr>\n          <tr>\n            <td>Difficulty</td>\n            <td>\n              <input\n                type=\"range\"\n                min=\"3\"\n                max=\"10\"\n                value={requestedBoardDifficulty}\n                onChange={e => {\n                  console.log(e);\n                  dispatch(changeRequestedBoardDifficulty(e.target.value));\n                }}\n              />\n            </td>\n            <td>\n              {Number(requestedBoardDifficulty) === 3\n                ? 'Impossible'\n                : requestedBoardDifficulty < 5\n                ? 'Hard'\n                : requestedBoardDifficulty < 7\n                ? 'Medium'\n                : requestedBoardDifficulty < 9\n                ? 'Easy'\n                : 'Very Easy'}\n              {' ' + requestedBoardDifficulty}tiles/mine\n            </td>\n          </tr>\n          <tr>\n            <td>Timer Limit</td>\n            <td>\n              <input\n                type=\"number\"\n                min=\"1\"\n                max=\"999\"\n                default=\"100\"\n                value={timerLimit}\n                onChange={e => {\n                  console.log(timerLimit);\n                  dispatch(changeTimerLimit(e.target.value));\n                }}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <button\n        onClick={() => {\n          dispatch(resetBoard(boardParams));\n        }}\n      >\n        Reset Board\n      </button>\n      <button\n        onClick={() => {\n          dispatch(avalancheActionCreator());\n        }}\n      >\n        Avalanche!\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = store => ({\n  victoryStatus: store.victoryStatus,\n  failureStatus: store.failureStatus,\n  boardParams: store.requestedBoardSize,\n  requestedBoardDifficulty: store.requestedBoardDifficulty,\n  timerLimit: store.timerLimit\n});\n\nexport default connect(mapStateToProps, null)(Menu);\n","import React from \"react\";\nimport { toggleFlag, clickSquare } from \"./actions.js\";\nimport { connect } from \"react-redux\";\n\nconst Board = ({ board, dispatch }) => {\n  return (\n    <div className=\"boardContainer\">\n      <table className=\"board\">\n        <tbody>\n          {board.map((row, rowNum) => {\n            return (\n              <tr key={rowNum}>\n                {row.map((cell, cellNum) => {\n                  let cellClass = getCellClass(cell);\n                  let cellContents = getCellContents(cellClass, cell);\n                  return (\n                    <td\n                      key={rowNum + \",\" + cellNum}\n                      rownum={rowNum}\n                      cellnum={cellNum}\n                      onClick={e => {\n                        if (e.altKey) {\n                          dispatch(toggleFlag([rowNum, cellNum]));\n                        } else {\n                          dispatch(clickSquare([rowNum, cellNum]));\n                        }\n                      }}\n                      className={cellClass + \" square\"}\n                    >\n                      {cellContents}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst getCellClass = cell => {\n  return cell.hasBeenClicked\n    ? cell.value === \"M\"\n      ? \"mine\"\n      : cell.value > 0\n      ? \"number _\" + cell.value\n      : \"empty\"\n    : cell.flagged\n    ? \"flagged\"\n    : \"waiting\";\n};\n\nconst getCellContents = (cellClass, cell) => {\n  return cellClass === \"mine\"\n    ? \"MINE\"\n    : cellClass.split(\" \")[0] === \"number\"\n    ? cell.value\n    : cellClass === \"empty\"\n    ? \"\"\n    : cellClass === \"flagged\"\n    ? \"Flag\"\n    : \"\";\n};\n\nconst mapStateToProps = store => ({\n  board: store.board,\n  victoryStatus: store.victoryStatus,\n  failureStatus: store.failureStatus\n});\nexport default connect(mapStateToProps, null)(Board);\n","import React from 'react';\nimport Banner from './banner.jsx';\nimport Menu from './menu.jsx';\nimport Board from './board.jsx';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { incrementTimer } from './actions.js';\n\nfunction App({ dispatch }) {\n  setInterval(() => {\n    dispatch(incrementTimer());\n  }, 1000);\n  return (\n    <div style={{ display: 'inline-block', width: '600px' }}>\n      <h1 className=\"title\">MINESWEEPHER</h1>\n      <Banner />\n      <br></br>\n      <Board className=\"board\" />\n      <Menu />\n      Directions: Alt+Click a square to mark it with a flag. Right click it to\n      uncover it. Don't uncover a mine! If the square has a number, this number\n      represents the number of mines adjacent to that square. Hit \"Avalanche!\"\n      to mix up the tiles on the board. V handy if you get stuck.\n    </div>\n  );\n}\n\nexport default connect()(App);\n","/*\n.______     ______        ___      .______       _______      _______  __    __  .__   __.   ______     _______.\n|   _  \\   /  __  \\      /   \\     |   _  \\     |       \\    |   ____||  |  |  | |  \\ |  |  /      |   /       |\n|  |_)  | |  |  |  |    /  ^  \\    |  |_)  |    |  .--.  |   |  |__   |  |  |  | |   \\|  | |  ,----'  |   (----`\n|   _  <  |  |  |  |   /  /_\\  \\   |      /     |  |  |  |   |   __|  |  |  |  | |  . `  | |  |        \\   \\    \n|  |_)  | |  `--'  |  /  _____  \\  |  |\\  \\----.|  '--'  |   |  |     |  `--'  | |  |\\   | |  `----.----)   |   \n|______/   \\______/  /__/     \\__\\ | _| `._____||_______/    |__|      \\______/  |__| \\__|  \\______|_______/    \n                                                                                                                \n*/\nconst generateNewBoard = size => {\n  let board = [];\n  for (let height = 0; height < size; height++) {\n    let row = [];\n    for (let width = 0; width < size; width++) {\n      row.push({ hasBeenClicked: false, value: 0, flagged: false });\n    }\n    board.push(row);\n  }\n  return board;\n};\nconst assignMines = (board, maxNumOfMines) => {\n  for (let mines = 0; mines < maxNumOfMines; mines++) {\n    let row = Math.floor(Math.random() * board.length);\n    let col = Math.floor(Math.random() * board[0].length);\n    if (board[row][col].value === \"M\") {\n      mines--;\n    } else {\n      board[row][col].value = \"M\";\n    }\n  } // generate random coordinates using MAth.random()*size params\n  // check to see if coord is already mined, if so, skip\n  //\n  return board;\n};\n\nconst assignNumbers = board => {\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[0].length; col++) {\n      if (board[row][col].value === \"M\") {\n        continue;\n      }\n      let value = 0;\n      if (row - 1 >= 0) {\n        if (board[row - 1][col].value === \"M\") {\n          value++;\n        }\n      }\n      if (row + 1 < board.length) {\n        if (board[row + 1][col].value === \"M\") {\n          value++;\n        }\n      }\n      if (col - 1 >= 0) {\n        if (board[row][col - 1].value === \"M\") {\n          value++;\n        }\n      }\n      if (col + 1 < board[0].length) {\n        if (board[row][col + 1].value === \"M\") {\n          value++;\n        }\n      }\n      if (row - 1 >= 0 && col - 1 >= 0) {\n        if (board[row - 1][col - 1].value === \"M\") {\n          value++;\n        }\n      }\n      if (row - 1 >= 0 && col + 1 < board[0].length) {\n        if (board[row - 1][col + 1].value === \"M\") {\n          value++;\n        }\n      }\n      if (row + 1 < board.length && col - 1 >= 0) {\n        if (board[row + 1][col - 1].value === \"M\") {\n          value++;\n        }\n      }\n      if (row + 1 < board.length && col + 1 < board[0].length) {\n        if (board[row + 1][col + 1].value === \"M\") {\n          value++;\n        }\n      }\n      board[row][col].value = value;\n    }\n  }\n  return board;\n};\nconst initialState = {\n  victoryStatus: false,\n  failureStatus: false,\n  flagsApplied: 0,\n  timer: 0,\n  timerLimit: 999\n};\nexport function createInitialState(sizeParams, difficulty, timerLimit) {\n  let board = generateNewBoard(sizeParams);\n  let maxNumOfMines = Math.floor(sizeParams ** 2 / difficulty);\n  board = assignMines(board, maxNumOfMines);\n  board = assignNumbers(board);\n  let state = Object.assign({}, initialState, {\n    board: board,\n    totalMines: maxNumOfMines,\n    requestedBoardSize: sizeParams,\n    requestedBoardDifficulty: difficulty,\n    timerLimit: timerLimit\n  });\n  return state;\n}\n\nexport function recursiveBoardCheck(board, location) {\n  let row = location[0];\n  let col = location[1];\n\n  if (row - 1 >= 0) {\n    if (\n      board[row - 1][col].value === 0 &&\n      !board[row - 1][col].hasBeenClicked\n    ) {\n      board[row - 1][col].hasBeenClicked = true;\n      board = recursiveBoardCheck(board, [row - 1, col]);\n    } else {\n      board[row - 1][col].hasBeenClicked = true;\n    }\n  }\n  if (row + 1 < board.length) {\n    if (\n      board[row + 1][col].value === 0 &&\n      !board[row + 1][col].hasBeenClicked\n    ) {\n      board[row + 1][col].hasBeenClicked = true;\n      board = recursiveBoardCheck(board, [row + 1, col]);\n    } else {\n      board[row + 1][col].hasBeenClicked = true;\n    }\n  }\n  if (col + 1 < board.length) {\n    if (\n      board[row][col + 1].value === 0 &&\n      !board[row][col + 1].hasBeenClicked\n    ) {\n      board = recursiveBoardCheck(board, [row, col + 1]);\n      board[row][col + 1].hasBeenClicked = true;\n    } else {\n      board[row][col + 1].hasBeenClicked = true;\n    }\n  }\n  if (col - 1 >= 0) {\n    if (\n      board[row][col - 1].value === 0 &&\n      !board[row][col - 1].hasBeenClicked\n    ) {\n      board[row][col - 1].hasBeenClicked = true;\n      board = recursiveBoardCheck(board, [row, col - 1]);\n    } else {\n      board[row][col - 1].hasBeenClicked = true;\n    }\n  }\n  if (row - 1 >= 0 && col - 1 >= 0) {\n    if (\n      board[row - 1][col - 1].value === 0 &&\n      !board[row - 1][col - 1].hasBeenClicked\n    ) {\n      board[row - 1][col - 1].hasBeenClicked = true;\n      board = recursiveBoardCheck(board, [row - 1, col - 1]);\n    } else {\n      board[row - 1][col - 1].hasBeenClicked = true;\n    }\n  }\n  if (row - 1 >= 0 && col + 1 < board[0].length) {\n    if (\n      board[row - 1][col + 1].value === 0 &&\n      !board[row - 1][col + 1].hasBeenClicked\n    ) {\n      board[row - 1][col + 1].hasBeenClicked = true;\n      board = recursiveBoardCheck(board, [row - 1, col + 1]);\n    } else {\n      board[row - 1][col + 1].hasBeenClicked = true;\n    }\n  }\n  if (row + 1 < board.length && col + 1 < board[0].length) {\n    if (\n      board[row + 1][col + 1].value === 0 &&\n      !board[row + 1][col + 1].hasBeenClicked\n    ) {\n      board[row + 1][col + 1].hasBeenClicked = true;\n      board = recursiveBoardCheck(board, [row + 1, col + 1]);\n    } else {\n      board[row + 1][col + 1].hasBeenClicked = true;\n    }\n  }\n  if (row + 1 < board.length && col - 1 >= 0) {\n    if (\n      board[row + 1][col - 1].value === 0 &&\n      !board[row + 1][col - 1].hasBeenClicked\n    ) {\n      board[row + 1][col - 1].hasBeenClicked = true;\n      board = recursiveBoardCheck(board, [row + 1, col - 1]);\n    } else {\n      board[row + 1][col - 1].hasBeenClicked = true;\n    }\n  }\n\n  // if square clicked on is blank\n  // all eight surrounding squares around it are uncovered (clicked)\n  // repeat check for the modified square\n  return board;\n}\n\nexport const checkForVictory = state => {\n  if (!state.failureStatus) {\n    if (state.flagsApplied === state.totalMines) {\n      for (let row = 0; row < state.board.length; row++) {\n        for (let col = 0; col < state.board[0].length; col++) {\n          var square = state.board[row][col];\n          if (square.value === \"M\" && square.flagged === false) {\n            return false;\n          } else if (square.value >= 0 && square.hasBeenClicked === false) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n\n  // only run when the correct number of flags is on the board\n  // if failureStatus === false\n  // all flags must cover mines, which must NOT have been clicked!\n  // all other spaces must be clicked\n  // if so, return true!\n\n  // else, return false\n};\n\nexport const avalanche = state => {\n  let board = state.board;\n  // move all mines that have not been flagged around on the board\n  let nonflaggedMines = [];\n  let nonClickedSquares = [];\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[0].length; col++) {\n      if (board[row][col].value === \"M\" && !board[row][col].flagged) {\n        nonflaggedMines.push([row, col]);\n        board[row][col].value = \"?\";\n      }\n      if (\n        typeof board[row][col].value === \"number\" &&\n        !board[row][col].hasBeenClicked\n      ) {\n        nonClickedSquares.push([row, col]);\n        board[row][col].value = \"?\";\n      }\n    }\n  }\n  let numberOfMinesRemaining = nonflaggedMines.length;\n  let potentialSpots = nonflaggedMines.concat(nonClickedSquares);\n  while (numberOfMinesRemaining > 0) {\n    let i = Math.floor(Math.random() * potentialSpots.length);\n    let row = potentialSpots[i][0];\n    let col = potentialSpots[i][1];\n    if (board[row][col].value !== \"M\") {\n      board[row][col].value = \"M\";\n      numberOfMinesRemaining--;\n    }\n  }\n  board = assignNumbers(board);\n\n  return Object.assign({}, state, { board: board });\n\n  // reassign numbers accordingly\n};\n","import {\n  CLICKED,\n  TOGGLE_FLAGGED,\n  NEW_GAME,\n  CHANGE_REQ_BOARD_SIZE,\n  CHANGE_REQ_BOARD_DIFFICULTY,\n  INCREMENT_TIMER,\n  CHANGE_TIMER_LIMIT,\n  AVALANCHE\n} from './actions';\nimport {\n  createInitialState,\n  recursiveBoardCheck,\n  checkForVictory,\n  avalanche\n} from './boardFunctions.js';\n\nconst initialState = createInitialState(10, 5);\n// TODO: split cases into seperate funcs, like toggleFlagged and click should be sep. should RUN the minesweeperApp\n// func and tell it which square was modified. minesweeperApp should contain all the board logic to determine\n// if you opened a cavern, uncovered a singleton square, or lost the game by clicking on a mine!\nfunction minesweeperApp(state = initialState, action) {\n  let location = action.location;\n  switch (action.type) {\n    case CLICKED:\n      // need ref to location from action\n      if (state.board[location[0]][location[1]].value === 'M') {\n        // you clicked on a mine! you lose! still need to update the board so that it displays properly.\n        let failureBoard = JSON.parse(JSON.stringify(state));\n        failureBoard.failureStatus = true;\n        failureBoard.board[location[0]][location[1]].hasBeenClicked = true;\n        return failureBoard;\n      } else {\n        // copy of board\n        let clickedBoard = JSON.parse(JSON.stringify(state.board));\n        // run recursive check\n        clickedBoard[location[0]][location[1]].hasBeenClicked = true;\n        if (clickedBoard[location[0]][location[1]].value === 0) {\n          clickedBoard = recursiveBoardCheck(clickedBoard, location);\n        }\n        let newBoard = Object.assign({}, state, { board: clickedBoard });\n        if (checkForVictory(newBoard)) {\n          newBoard.victoryStatus = true;\n        }\n        // return\n        return newBoard;\n      }\n    case TOGGLE_FLAGGED:\n      let toggledBoard = JSON.parse(JSON.stringify(state));\n      toggledBoard.board[location[0]][location[1]].flagged = !toggledBoard\n        .board[location[0]][location[1]].flagged;\n      if (toggledBoard.board[location[0]][location[1]].flagged) {\n        toggledBoard.flagsApplied++;\n        // toggledBoard.\n      } else {\n        toggledBoard.flagsApplied--;\n      }\n      if (checkForVictory(toggledBoard)) {\n        toggledBoard.victoryStatus = true;\n      }\n      // modify board at that location\n      return toggledBoard;\n    case NEW_GAME:\n      let newState = Object.assign({}, state);\n      newState = createInitialState(\n        action.boardParams,\n        state.requestedBoardDifficulty\n      );\n      // todo, write newgame reducer\n      return newState;\n    case CHANGE_REQ_BOARD_SIZE:\n      return Object.assign({}, state, { requestedBoardSize: action.size });\n    case CHANGE_REQ_BOARD_DIFFICULTY:\n      return Object.assign({}, state, {\n        requestedBoardDifficulty: action.difficulty\n      });\n    case INCREMENT_TIMER:\n      console.log('increment timer');\n      if (state.timer + 1 > state.timerLimit) {\n        console.log('failure');\n        return Object.assign({}, state, { failureStatus: true });\n      }\n      return Object.assign({}, state, state.timer++);\n    case CHANGE_TIMER_LIMIT:\n      return Object.assign({}, state, (state.timerLimit = action.timerLimit));\n    case AVALANCHE:\n      let avalancheState = JSON.parse(JSON.stringify(state));\n      return avalanche(avalancheState);\n    default:\n      return state;\n  }\n}\n\nexport default minesweeperApp;\n","import { createStore } from \"redux\";\nimport minesweeperApp from \"./reducers.js\";\n\nconst store = createStore(minesweeperApp);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}